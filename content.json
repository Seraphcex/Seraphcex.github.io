{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"Seraphcex","url":"http://yoursite.com"},"pages":[{"title":"About Me","date":"2018-03-06T14:26:29.696Z","updated":"2018-03-06T14:26:29.696Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"来自广州，现为 广东东软学院 软件工程大三学生，专业方向Android应用开发I’m from Guangzhou China,a junior student in Neusoft Institute Guangdong,major in Software Engineering,mainly focus on developing Android apps."}],"posts":[{"title":"","slug":"~nlx0vnjq.2o2","date":"2018-03-06T14:49:37.038Z","updated":"2018-03-06T14:58:12.116Z","comments":true,"path":"2018/03/06/~nlx0vnjq.2o2/","link":"","permalink":"http://yoursite.com/2018/03/06/~nlx0vnjq.2o2/","excerpt":"","text":"code{white-space: pre;} /* https://gist.github.com/andyferra/2554919 */ body { font-family: Helvetica, arial, sans-serif; font-size: 14px; line-height: 1.6; padding-top: 10px; padding-bottom: 10px; background-color: white; padding: 30px; } body > *:first-child { margin-top: 0 !important; } body > *:last-child { margin-bottom: 0 !important; } a { color: #4183C4; } a.absent { color: #cc0000; } a.anchor { display: block; padding-left: 30px; margin-left: -30px; cursor: pointer; position: absolute; top: 0; left: 0; bottom: 0; } h1, h2, h3, h4, h5, h6 { margin: 20px 0 10px; padding: 0; font-weight: bold; -webkit-font-smoothing: antialiased; cursor: text; position: relative; } h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor { background: url(\"../../images/modules/styleguide/para.png\") no-repeat 10px center; text-decoration: none; } h1 tt, h1 code { font-size: inherit; } h2 tt, h2 code { font-size: inherit; } h3 tt, h3 code { font-size: inherit; } h4 tt, h4 code { font-size: inherit; } h5 tt, h5 code { font-size: inherit; } h6 tt, h6 code { font-size: inherit; } h1 { font-size: 28px; color: black; } h2 { font-size: 24px; border-bottom: 1px solid #cccccc; color: black; } h3 { font-size: 18px; } h4 { font-size: 16px; } h5 { font-size: 14px; } h6 { color: #777777; font-size: 14px; } p, blockquote, ul, ol, dl, li, table, pre { margin: 15px 0; } hr { background: transparent url(\"../../images/modules/pulls/dirty-shade.png\") repeat-x 0 0; border: 0 none; color: #cccccc; height: 4px; padding: 0; } body > h2:first-child { margin-top: 0; padding-top: 0; } body > h1:first-child { margin-top: 0; padding-top: 0; } body > h1:first-child + h2 { margin-top: 0; padding-top: 0; } body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child { margin-top: 0; padding-top: 0; } a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 { margin-top: 0; padding-top: 0; } h1 p, h2 p, h3 p, h4 p, h5 p, h6 p { margin-top: 0; } li p.first { display: inline-block; } ul, ol { padding-left: 30px; } ul :first-child, ol :first-child { margin-top: 0; } ul :last-child, ol :last-child { margin-bottom: 0; } dl { padding: 0; } dl dt { font-size: 14px; font-weight: bold; font-style: italic; padding: 0; margin: 15px 0 5px; } dl dt:first-child { padding: 0; } dl dt > :first-child { margin-top: 0; } dl dt > :last-child { margin-bottom: 0; } dl dd { margin: 0 0 15px; padding: 0 15px; } dl dd > :first-child { margin-top: 0; } dl dd > :last-child { margin-bottom: 0; } blockquote { border-left: 4px solid #dddddd; padding: 0 15px; color: #777777; } blockquote > :first-child { margin-top: 0; } blockquote > :last-child { margin-bottom: 0; } table { padding: 0; } table tr { border-top: 1px solid #cccccc; background-color: white; margin: 0; padding: 0; } table tr:nth-child(2n) { background-color: #f8f8f8; } table tr th { font-weight: bold; border: 1px solid #cccccc; text-align: left; margin: 0; padding: 6px 13px; } table tr td { border: 1px solid #cccccc; text-align: left; margin: 0; padding: 6px 13px; } table tr th :first-child, table tr td :first-child { margin-top: 0; } table tr th :last-child, table tr td :last-child { margin-bottom: 0; } img { max-width: 100%; } span.frame { display: block; overflow: hidden; } span.frame > span { border: 1px solid #dddddd; display: block; float: left; overflow: hidden; margin: 13px 0 0; padding: 7px; width: auto; } span.frame span img { display: block; float: left; } span.frame span span { clear: both; color: #333333; display: block; padding: 5px 0 0; } span.align-center { display: block; overflow: hidden; clear: both; } span.align-center > span { display: block; overflow: hidden; margin: 13px auto 0; text-align: center; } span.align-center span img { margin: 0 auto; text-align: center; } span.align-right { display: block; overflow: hidden; clear: both; } span.align-right > span { display: block; overflow: hidden; margin: 13px 0 0; text-align: right; } span.align-right span img { margin: 0; text-align: right; } span.float-left { display: block; margin-right: 13px; overflow: hidden; float: left; } span.float-left span { margin: 13px 0 0; } span.float-right { display: block; margin-left: 13px; overflow: hidden; float: right; } span.float-right > span { display: block; overflow: hidden; margin: 13px auto 0; text-align: right; } code, tt { margin: 0 2px; padding: 0 5px; white-space: nowrap; border: 1px solid #eaeaea; background-color: #f8f8f8; border-radius: 3px; } pre code { margin: 0; padding: 0; white-space: pre; border: none; background: transparent; } .highlight pre { background-color: #f8f8f8; border: 1px solid #cccccc; font-size: 13px; line-height: 19px; overflow: auto; padding: 6px 10px; border-radius: 3px; } pre { background-color: #f8f8f8; border: 1px solid #cccccc; font-size: 13px; line-height: 19px; overflow: auto; padding: 6px 10px; border-radius: 3px; } pre code, pre tt { background-color: transparent; border: none; } title: Java Basic--Variable and Constant date: 2018-01-22 16:36:56 tags: Java Notes --- According to the Java lesson that I took,I'll divide my notes into 3 parts:basic,medium and advanced.So this is the first section of part 1. Keyword These words have special purposes in Java,each one has special meaning to the Java compiler,also we need to notice that they are case sensitive. For example void // this is a keyword Void // this isn&#39;t a keyword And here are part of keywords that we usually use: abstract boolean break byte case catch char class continue default do double else extends false final finally float for if implements import instanceof int interface long native new null package private protected synchronized this throw throws transient true try void volatile while Pratice public class HelloWorld { public static void main(String[] args){ System.out.println(&quot;Hello World&quot;); } } Identifier It's a symbol that we use to name variable,class,method etc. When we use identifier,there are some rules need to be followed: A identifier can consists of **letter,number,_,$,and can't starts with number**. Identifier can't be Java keyword or reserved word. Identifier is case sensitive. Naming a identifier better can inform its meaning or purpose. Variable We can see it as a box,we can put anything we want into the box,and replace it with new item at any time. In Java,we use 3 elements to describe variable:type,name and value. Also we need to follow rules like: A variable name can consists of **letter,number,_,$,and can't starts with number**. Variable name can't be Java keyword or reserved word. Variable name is case sensitive. Naming a variable name better can inform its meaning or purpose. In order to form a better program habit,there are several naming methods: Hungarian notation Camel case Pascal case Practice public class HelloWorld{ public static void main(String[] args) { String hobby = &quot;football&quot;; // we declare a variable System.out.println(&quot;My hobby is&quot; + hobby); // we bind those two together with &#39;+&#39;,and print it out } } Data type Java is a strong typing programming language,it means every data in Java has its own type,and it must be define when Java compiles,want more details click here Practice public class HelloWorld{ public static void main(String[] args) { String name=&quot;Tom&quot;; char sex=&#39;male&#39;; int age=18; double price=120.5; boolean isOK=true; System.out.println(name); System.out.println(sex); System.out.println(num); System.out.println(price); System.out.println(isOK); } } Rules of using variables Variables must declare before using it. public class HelloWorld{ public static void main(String[] args) { String name=&quot;Tom&quot;; System.out.println(name); } } You can declare and initialize variables in the same time. String name = &quot;Tom&quot;; Also you can first declareit,and then assign it afterward. String name; name = &quot;Tom&quot;; You can only assign one value to a variable,but you can change multiple time. String name = &quot;Tom&quot;; name = &quot;Jack&quot;; The variables that you have declared in method main must be assigned first,and then you can output it. public class HelloWorld{ public static void main(String[] args) { String name=&quot;Tom&quot;; System.out.println(name); } } Although you might not have error shows up,but in real life development,I suggest only using english when you naming variables.It's easier to have safety issues if you use other languages,such as having gibberish when you are working on cross platform. Auto type conversion In our program,we usually need to convert between differnet primitive data types of data.For example: int num1 = 82; double num2 = num1; System.out.println(num2); This kind of conversion is called auto type conversion.Of course,it needs to match particular antecedents: Target type is compatible with source type,like double is compatible with int,but char isn't compatible with int. Target type must larger than source type. Forced type conversion Although auto type conversion is pretty convenient,but it can't match all of our programming needs.So we need something called forced type conversion. syntax: (target type)value double num1 = 75.8; int num2 = (int)num1; System.out.println(num2); and then you'll have 75 You can see ,it just simply remove everything to the right of the decimal point(including decimal point itself). Therefore,it's pretty clear now,using forced type conversion might cause data lost,you need to be careful when you using it. Constant We see it as a kind of special variable,when its value has been assigned,it doesn't allow to change during the operation of your program. syntax: final type name = value; final String NAME = &quot;Tom&quot;; final double PI = 3.14; Using constant in your program can improve maintainability,and notice we normally use capital letter while naming a constant. Annotation When we are coding,usually need to add some notes attach to the source code,in order to describe its purpose.It's a important thing when we talk about coding. There are three kinds of annotation: ``` /** *@authur Seraphcex *@version v1.0 */ ``` ``` / this can include multiple lines ``` //single line Annotation won't be executed during the operation,more details click here.","categories":[],"tags":[]},{"title":"Java Basic--Variable and Constant","slug":"2018-01-22-java-basic-variable-and-constant","date":"2018-01-22T08:36:56.000Z","updated":"2018-03-06T14:58:13.625Z","comments":true,"path":"2018/01/22/2018-01-22-java-basic-variable-and-constant/","link":"","permalink":"http://yoursite.com/2018/01/22/2018-01-22-java-basic-variable-and-constant/","excerpt":"","text":"According to the Java lesson that I took,I’ll divide my notes into 3 parts:basic,medium and advanced.So this is the first section of part 1. KeywordThese words have special purposes in Java,each one has special meaning to the Java compiler,also we need to notice that they are case sensitive.For example12void // this is a keywordVoid // this isn&apos;t a keyword And here are part of keywords that we usually use: abstract boolean break byte case catch char class continue default do double else extends false final finally float for if implements import instanceof int interface long native new null package private protected synchronized this throw throws transient true try void volatile while Pratice12345public class HelloWorld &#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello World&quot;); &#125;&#125; IdentifierIt’s a symbol that we use to name variable,class,method etc. When we use identifier,there are some rules need to be followed: A identifier can consists of letter,number,_,$,and can’t starts with number. Identifier can’t be Java keyword or reserved word. Identifier is case sensitive. Naming a identifier better can inform its meaning or purpose. VariableWe can see it as a box,we can put anything we want into the box,and replace it with new item at any time. In Java,we use 3 elements to describe variable:type,name and value. Also we need to follow rules like: A variable name can consists of letter,number,_,$,and can’t starts with number. Variable name can’t be Java keyword or reserved word. Variable name is case sensitive. Naming a variable name better can inform its meaning or purpose. In order to form a better program habit,there are several naming methods: Hungarian notation Camel case Pascal case Practice123456public class HelloWorld&#123; public static void main(String[] args) &#123; String hobby = &quot;football&quot;; // we declare a variable System.out.println(&quot;My hobby is&quot; + hobby); // we bind those two together with &apos;+&apos;,and print it out &#125;&#125; Data typeJava is a strong typing programming language,it means every data in Java has its own type,and it must be define when Java compiles,want more details click here Practice1234567891011121314public class HelloWorld&#123; public static void main(String[] args) &#123; String name=&quot;Tom&quot;; char sex=&apos;male&apos;; int age=18; double price=120.5; boolean isOK=true; System.out.println(name); System.out.println(sex); System.out.println(num); System.out.println(price); System.out.println(isOK); &#125;&#125; Rules of using variables Variables must declare before using it. 123456public class HelloWorld&#123; public static void main(String[] args) &#123; String name=&quot;Tom&quot;; System.out.println(name); &#125;&#125; You can declare and initialize variables in the same time. 1String name = &quot;Tom&quot;; Also you can first declareit,and then assign it afterward.12String name;name = &quot;Tom&quot;; You can only assign one value to a variable,but you can change multiple time. 12String name = &quot;Tom&quot;;name = &quot;Jack&quot;; The variables that you have declared in method main must be assigned first,and then you can output it. 123456public class HelloWorld&#123; public static void main(String[] args) &#123; String name=&quot;Tom&quot;; System.out.println(name); &#125;&#125; Although you might not have error shows up,but in real life development,I suggest only using english when you naming variables.It’s easier to have safety issues if you use other languages,such as having gibberish when you are working on cross platform. Auto type conversionIn our program,we usually need to convert between differnet primitive data types of data.For example:123int num1 = 82;double num2 = num1;System.out.println(num2); This kind of conversion is called auto type conversion.Of course,it needs to match particular antecedents: Target type is compatible with source type,like double is compatible with int,but char isn’t compatible with int. Target type must larger than source type. Forced type conversionAlthough auto type conversion is pretty convenient,but it can’t match all of our programming needs.So we need something called forced type conversion. syntax: (target type)value 123double num1 = 75.8;int num2 = (int)num1;System.out.println(num2); and then you’ll have175 You can see ,it just simply remove everything to the right of the decimal point(including decimal point itself). Therefore,it’s pretty clear now,using forced type conversion might cause data lost,you need to be careful when you using it. ConstantWe see it as a kind of special variable,when its value has been assigned,it doesn’t allow to change during the operation of your program. syntax: final type name = value; 12final String NAME = &quot;Tom&quot;;final double PI = 3.14; Using constant in your program can improve maintainability,and notice we normally use capital letter while naming a constant. AnnotationWhen we are coding,usually need to add some notes attach to the source code,in order to describe its purpose.It’s a important thing when we talk about coding. There are three kinds of annotation: 12345/** * *@authur Seraphcex *@version v1.0 */ 1234/* *this can include multiple lines * * 1//single line Annotation won’t be executed during the operation,more details click here.","categories":[],"tags":[{"name":"Java Notes","slug":"Java-Notes","permalink":"http://yoursite.com/tags/Java-Notes/"}]},{"title":"Java Basic--Variable and Constant","slug":"~myndd02c.if2","date":"2018-01-22T08:36:56.000Z","updated":"2018-03-06T14:58:11.960Z","comments":true,"path":"2018/01/22/~myndd02c.if2/","link":"","permalink":"http://yoursite.com/2018/01/22/~myndd02c.if2/","excerpt":"","text":"According to the Java lesson that I took,I’ll divide my notes into 3 parts:basic,medium and advanced.So this is the first section of part 1. KeywordThese words have special purposes in Java,each one has special meaning to the Java compiler,also we need to notice that they are case sensitive.For example12void // this is a keywordVoid // this isn&apos;t a keyword And here are part of keywords that we usually use: abstract boolean break byte case catch char class continue default do double else extends false final finally float for if implements import instanceof int interface long native new null package private protected synchronized this throw throws transient true try void volatile while Pratice12345public class HelloWorld &#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello World&quot;); &#125;&#125; IdentifierIt’s a symbol that we use to name variable,class,method etc. When we use identifier,there are some rules need to be followed: A identifier can consists of letter,number,_,$,and can’t starts with number. Identifier can’t be Java keyword or reserved word. Identifier is case sensitive. Naming a identifier better can inform its meaning or purpose. VariableWe can see it as a box,we can put anything we want into the box,and replace it with new item at any time. In Java,we use 3 elements to describe variable:type,name and value. Also we need to follow rules like: A variable name can consists of letter,number,_,$,and can’t starts with number. Variable name can’t be Java keyword or reserved word. Variable name is case sensitive. Naming a variable name better can inform its meaning or purpose. In order to form a better program habit,there are several naming methods: Hungarian notation Camel case Pascal case Practice123456public class HelloWorld&#123; public static void main(String[] args) &#123; String hobby = &quot;football&quot;; // we declare a variable System.out.println(&quot;My hobby is&quot; + hobby); // we bind those two together with &apos;+&apos;,and print it out &#125;&#125; Data typeJava is a strong typing programming language,it means every data in Java has its own type,and it must be define when Java compiles,want more details click here Practice1234567891011121314public class HelloWorld&#123; public static void main(String[] args) &#123; String name=&quot;Tom&quot;; char sex=&apos;male&apos;; int age=18; double price=120.5; boolean isOK=true; System.out.println(name); System.out.println(sex); System.out.println(num); System.out.println(price); System.out.println(isOK); &#125;&#125; Rules of using variables Variables must declare before using it. 123456public class HelloWorld&#123; public static void main(String[] args) &#123; String name=&quot;Tom&quot;; System.out.println(name); &#125;&#125; You can declare and initialize variables in the same time. 1String name = &quot;Tom&quot;; Also you can first declareit,and then assign it afterward.12String name;name = &quot;Tom&quot;; You can only assign one value to a variable,but you can change multiple time. 12String name = &quot;Tom&quot;;name = &quot;Jack&quot;; The variables that you have declared in method main must be assigned first,and then you can output it. 123456public class HelloWorld&#123; public static void main(String[] args) &#123; String name=&quot;Tom&quot;; System.out.println(name); &#125;&#125; Although you might not have error shows up,but in real life development,I suggest only using english when you naming variables.It’s easier to have safety issues if you use other languages,such as having gibberish when you are working on cross platform. Auto type conversionIn our program,we usually need to convert between differnet primitive data types of data.For example:123int num1 = 82;double num2 = num1;System.out.println(num2); This kind of conversion is called auto type conversion.Of course,it needs to match particular antecedents: Target type is compatible with source type,like double is compatible with int,but char isn’t compatible with int. Target type must larger than source type. Forced type conversionAlthough auto type conversion is pretty convenient,but it can’t match all of our programming needs.So we need something called forced type conversion. syntax: (target type)value 123double num1 = 75.8;int num2 = (int)num1;System.out.println(num2); and then you’ll have175 You can see ,it just simply remove everything to the right of the decimal point(including decimal point itself). Therefore,it’s pretty clear now,using forced type conversion might cause data lost,you need to be careful when you using it. ConstantWe see it as a kind of special variable,when its value has been assigned,it doesn’t allow to change during the operation of your program. syntax: final type name = value; 12final String NAME = &quot;Tom&quot;;final double PI = 3.14; Using constant in your program can improve maintainability,and notice we normally use capital letter while naming a constant. AnnotationWhen we are coding,usually need to add some notes attach to the source code,in order to describe its purpose.It’s a important thing when we talk about coding. There are three kinds of annotation: 12345/** * *@authur Seraphcex *@version v1.0 */ 1234/* *this can include multiple lines * * 1//single line Annotation won’t be executed during the operation,more details click here.","categories":[],"tags":[{"name":"Java Notes","slug":"Java-Notes","permalink":"http://yoursite.com/tags/Java-Notes/"}]},{"title":"Hello World","slug":"2018-01-20-hello-world","date":"2018-01-20T04:43:22.000Z","updated":"2018-03-06T14:47:02.214Z","comments":true,"path":"2018/01/20/2018-01-20-hello-world/","link":"","permalink":"http://yoursite.com/2018/01/20/2018-01-20-hello-world/","excerpt":"","text":"Welcome to my blog! This is my very first post. From now on,though I’m not a native english speaker,I’ll try to write my blog in english and update it mainly with my study &amp; project notes if my time is available.So thank you for reading my blog,any suggestions would be appreciated.","categories":[],"tags":[{"name":"Others","slug":"Others","permalink":"http://yoursite.com/tags/Others/"}]}]}